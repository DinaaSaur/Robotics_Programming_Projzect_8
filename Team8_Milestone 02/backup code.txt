import math
import numpy as np

def sysCall_init():
    sim = require('sim')
    
    
    self.n = 5  # Example value for the number of joints

    # Getting joint objects and storing them in a dictionary
    self.joints = {}
    for i in range(1, self.n + 1):
        self.joints[i] = sim.getObject(f"/q{i}")
        
    print("here")

    # Getting reference frame objects and storing them in a dictionary
    self.O = {}
    for i in range(1, self.n + 2):
        self.O[i] = sim.getObject(f"/ReferenceFrame{i - 1}")

    print("here2",self.O)
    
    self.DH_params = {
    'q1_q2': {'theta': 85 , 'd': 0.0404, 'r': 0.0139, 'alpha': 90},
    'q2_q3': {'theta': -66.0 , 'd': 0.0, 'r': 0.12, 'alpha': 0.0},
    'q3_q4': {'theta': 90.0 , 'd': 0.0134, 'r': 0.0051, 'alpha': 90},
    'q4_q5': {'theta': -0.0 , 'd': 0.0558, 'r': 0.005, 'alpha': 90},
    'q5_endEffector': {'theta': -0.0 , 'd': 0.0, 'r': 0.0, 'alpha': -66.6}
    }
    
    self.dh_list_of_lists = [[params['theta'], params['d'], params['r'], params['alpha']] for joint, params in self.DH_params.items()]

    print(self.dh_list_of_lists)


    # do some initialization here
    #
    # Instead of using globals, you can do e.g.:
    # self.myVariable = 21000000

def DH(joint, params):
    # Extract theta, d, a, alpha from params
    th, d, a, alpha = 0.0, 0.0, 0.0, 0.0
    
    # Get the joint position (assuming joint is passed correctly)
    q = sim.getJointPosition(joint)

    # Determine joint type (revolute or prismatic)
    if sim.getJointType(joint) == sim.joint_revolute_subtype:
        th = q + params[0]  # Z-axis orientation
        d = params[1]       # Z-axis displacement
    else:
        th = params[0]      # Z-axis orientation
        d = q + params[1]   # Z-axis displacement

    # Assign the remaining parameters
    a = params[2]          # X-axis displacement
    alpha = params[3]       # X-axis orientation

    # Compute cosines and sines for theta and alpha
    cth = np.cos(th)
    sth = np.sin(th)
    calpha = np.cos(alpha)
    salpha = np.sin(alpha)

    # Compute the transformation matrix
    A = np.array([
        [cth, -sth * calpha,  sth * salpha, a * cth],
        [sth,  cth * calpha, -cth * salpha, a * sth],
        [0,    salpha,        calpha,        d],
        [0,    0,             0,             1]
    ])

    return A
    
def getAi(joints, DH_params):
    Ai = []  # Initialize empty list for transformation matrices

    # Iterate over the joints
    for i in range(len(joints)):
        Ai.append(DH(joints[i+1], DH_params[i]))  # Compute DH for each joint and store in Ai

    return Ai  # Return the list of transformation matrices

def updateFrames(joints, DH_params):
    Ai = getAi(joints, DH_params)
    for i in range(1, self.n):  # Assuming 'n' is defined elsewhere
        
        #sim.setObjectMatrix(self.O[i+1], self.O[i], Ai[i].data())
        
        matrix_3x4 = Ai[i][:3, :]  # Take the first 3 rows and all columns
        matrix_3x4_list = matrix_3x4.flatten().tolist()  # Flatten into a list
        
        sim.setObjectMatrix(self.O[i+1], self.O[i], matrix_3x4_list)

def sysCall_actuation():
    print(self.joints,self.dh_list_of_lists)
    updateFrames(self.joints,self.dh_list_of_lists)
    pass

def sysCall_sensing():
    # put your sensing code here
    pass

def sysCall_cleanup():
    EE_handle = sim.getObject("/endEffector_respondable")
    base_handle = sim.getObject("../base_link_visual")
    EE_position = sim.getObjectPosition(EE_handle, base_handle)
    print(EE_position)
    
    
    
    # do some clean-up here
    pass

# See the user manual or the available code snippets for additional callback functions and details
